import re

# Sample dictionary of Sanskrit roots (рдзрд╛рддреБ) with possible suffixes
SANSKRIT_DHATUS = {
    "рдЧрдореН": ["рддрд┐", "рддрдГ", "рдиреНрддрд┐", "рд╕рд┐", "рдердГ", "рде", "рдорд┐", "рд╡рдГ", "рдордГ"],  # Example conjugations for "рдЧрдореН" (to go)
    "рднреВ": ["рддрд┐", "рддрдГ", "рдиреНрддрд┐"],  # Example conjugations for "рднреВ" (to be)
    "рдХреГ": ["рддрд┐", "рддрдГ", "рдиреНрддрд┐"],  # Example conjugations for "рдХреГ" (to do)
}

UPASARGA_LIST = [
    "рдкреНрд░", "рдкрд░", "рдЕрдк", "рд╕рдореН", "рдЕрддрд┐", "рдЕрдзрд┐", "рдирд┐", "рдирд┐рд░реН", "рджреБрд░реН", "рджреБрд╕реН",
    "рдЕрднрд┐", "рдЙрджреН", "рдЙрдк", "рдЕрдиреБ", "рдЕрд╡", "рд╡рд┐", "рдкрд░рд┐", "рдкреНрд░рддрд┐", "рд╕реБ", "рд╕реБрд╕реН",
    "рдХреБ", "рдЕрдЩреН"
]

"""
рдХреГрддреН рдкреНрд░рддреНрдпрдпрд╛рдГ (Primary verbal suffixes) тАУ Used for deriving nouns and adjectives from roots.

рддрджреНрдзрд┐рдд рдкреНрд░рддреНрдпрдпрд╛рдГ (Secondary suffixes) тАУ Used to derive new words from existing nouns/adjectives.

рд╕рд░реНрд╡рдирд╛рдо рдкреНрд░рддреНрдпрдпрд╛рдГ (Pronominal suffixes) тАУ Used for pronoun declension.

рд╡рд┐рднрдХреНрддрд┐ рдкреНрд░рддреНрдпрдпрд╛рдГ (Case suffixes) тАУ Used for noun inflection (like nominative, accusative, etc.).

рд╕рдВрдзрд┐ рдкреНрд░рддреНрдпрдпрд╛рдГ (Joining suffixes) тАУ Used in compound word formation.

рдзрд╛рддреБ рдкреНрд░рддреНрдпрдпрд╛рдГ (Verb inflections) тАУ Used in tense and mood-based conjugation.

"""
# PRATYAYA_LIST = ["рдХ", "рдХреНрдд", "рдд", "рддреНрд╡", "рддрд╛", "рд╕реНрдп", "рдЕрдп"]  # Sample suffixes (рдкреНрд░рддреНрдпрдп)
# KRIT_PRATYAYA_LIST
KRIT_PRATYAYA_LIST = [
    "рдХ", "рдХреНрдд", "рдХреНрддреНрд╡рд╛", "рдЕ", "рдЕрди", "рдЕрд▓", "рддрд╛", "рддреНрд╡", "рдЗ", "рддреНрд░", "рдЗрди",
    "рдЕрдп", "рди", "рд▓реА", "рд▓реНрдп", "рдорди", "рдо", "рд╢", "рдп", "рд╡", "рддреГ", "рдЗрддреНрд░", "рдЗрд╖реНрдгреБ",
    "рдорд╛рддреНрд░", "рд╕реНрдп", "рдорд▓", "рдиреНрдп", "рддреНрд░", "рд╢рддреГ", "рд╢рд╛рдирдЪ", "рдЕрд╡реНрдпрдп", "рдЗрдиреН", "рдЕрд╕"
]

TADDHITA_PRATYAYA_LIST = [
    "рдЗрдп", "рдХ", "рдХрд╛", "рдд", "рддреНрд░", "рддреНрд╡", "рдЗ", "рддреНрд╡", "рдп", "рд╡рддреН", "рдордп", "рд╢реАрд▓",
    "рдзрд░реНрдо", "рд▓", "рдЬ", "рдЬрдирд┐", "рдпрди", "рдЕрдЪ", "рдЕрдг", "рдЕрдп", "рдорд╛рддреГ", "рд╕", "рдЗрд╖реНрда",
    "рдЕрд░реНрде", "рдЗрд╖реНрдгреБ", "рдЗрддреНрд░", "рд╕рд╛рд░", "рд▓реБ"
]

SARVANAMA_PRATYAYA_LIST = [
    "рдЕрд╕реНрдо", "рддреНрд╡", "рдпреБрд╖реНрдо", "рдПрдд", "рдЕрдд", "рдЗрджрдореН", "рдХрд┐рдореН", "рдп", "рдд", "рд╕реНрдо",
    "рдХ", "рдж", "рдПрд╖", "рди"
]
VIBHAKTI_PRATYAYA_LIST = [
    "рд╕реБрдкреН", "рдЕрдореН", "рдЖ", "рдЕрдп", "рд╕реНрдо", "рдЕрд╕реН", "рд╕реНрдп", "рдУ", "рдИ", "рдЗрди", "рддреНрд░",
    "рдо", "рдЗрдиреН", "рдЕрд╕реНрдо", "рдирд┐", "рддрд┐"
]
SANDHI_PRATYAYA_LIST = [
    "рдЕ", "рдЗ", "рдЙ", "рдЛ", "рдП", "рдУ", "рдФ", "рдЕрдГ", "рдореН", "рдиреН", "рд╕реН"
]
DHATU_PRATYAYA_LIST = [
    "рддрд┐", "рддрдГ", "рдиреНрддрд┐", "рд╕рд┐", "рдердГ", "рде", "рдорд┐", "рд╡рдГ", "рдордГ",  # Present (рд▓рдЯреН)
    "рддрд╛рдореН", "рддрд╛рддрд╛рдореН", "рдЕрди"  # Imperative (рд▓реЛрдЯреН)
    "рд╕реНрдпрддрд┐", "рд╕реНрдпрддрдГ", "рд╕реНрдпрдиреНрддрд┐", "рд╕реНрд╕реНрдпрд╕рд┐", "рд╕реНрдпрдердГ", "рд╕реНрдпрде",  # Future (рд▓реГрдЯреН)
    "рдЕрдореН", "рдЖрдГ", "рдЕрдд", "рдЖрдо", "рдЖрддрд╛рдореН", "рдЕрдиреН",  # Past (рд▓рдЩреН, рд▓рд┐рдЯреН, рд▓реБрдЯреН)
]
PRATYAYA_LIST = KRIT_PRATYAYA_LIST + TADDHITA_PRATYAYA_LIST + SARVANAMA_PRATYAYA_LIST + VIBHAKTI_PRATYAYA_LIST + SANDHI_PRATYAYA_LIST + DHATU_PRATYAYA_LIST


def identify_pratyaya(word):
    """
    Identify the suffix (Pratyaya) in a given Sanskrit word.
    """
    for pratyaya in PRATYAYA_LIST:
        if word.endswith(pratyaya):
            return pratyaya
    return None

def analyze_sanskrit_word(word):
    """
    Sanskrit Morphological Analyzer: Identifies root, suffix, prefix
    and grammatical features of a given Sanskrit word.
    """
    root = None
    suffix = None
    prefix = None

    # Checking for Upasarga (Prefix)
    for upasarga in UPASARGA_LIST:
        if word.startswith(upasarga):
            prefix = upasarga
            word = word[len(upasarga):]  # Remove the prefix
            break  # Assuming single prefix

    # Checking for Dhatu (Root)
    for dhatu, suffixes in SANSKRIT_DHATUS.items():
        for suf in suffixes:
            if word.endswith(suf):
                root = dhatu
                suffix = suf
                break
        if root:
            break

    # Checking for Pratyaya (Suffix)
    additional_suffix = None
    for pratyaya in PRATYAYA_LIST:
        if word.endswith(pratyaya) and pratyaya != suffix:
            additional_suffix = pratyaya
            break

    return {
        "word": word,
        "root": root,
        "suffix": suffix,
        "prefix": prefix,
        "additional_suffix": additional_suffix
    }


"""
ЁЯУЦ Kr╠еt Pratyayas (Primary suffixes) тЖТ Noun/Adjective formation

ЁЯУЭ Taddhita Pratyayas (Secondary suffixes) тЖТ Derived words from nouns

ЁЯд▓ Sarvanama Pratyayas (Pronouns) тЖТ Used in pronoun declension

ЁЯФд Vibhakti Pratyayas (Case suffixes) тЖТ Noun inflection

ЁЯФЧ Sandhi Pratyayas (Joining suffixes) тЖТ Used in compound formation

тЪб Dhatu Pratyayas (Verb inflections) тЖТ Used in tense/mood conjugation
"""
# Example Usage
sanskrit_word = "рдкреНрд░рдЧрдЪреНрдЫрддрд┐"
sanskrit_word = "saurabh"
analysis_result = analyze_sanskrit_word(sanskrit_word)

print("Sanskrit Morphological Analysis:")
print(analysis_result)


# Test Cases
print(identify_pratyaya("рдЧрдордиреАрдп"))  # Expected: "рдиреАрдп"
print(identify_pratyaya("рд╡рдХреНрддрд╡реНрдп"))  # Expected: "рд╡реНрдп"
print(identify_pratyaya("рдкреБрд░реБрд╖рддреНрд╡"))  # Expected: "рддреНрд╡"

