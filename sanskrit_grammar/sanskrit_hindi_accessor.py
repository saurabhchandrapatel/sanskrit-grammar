import sqlite3
import re

# Database setup (Stores Sanskrit words and Hindi glosses)
DB_NAME = "sanskrit_hindi_dict.db"

def initialize_database():
    """
    Initialize SQLite database to store Sanskrit-Hindi word mappings.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS SanskritHindi (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sanskrit_word TEXT UNIQUE,
            hindi_gloss TEXT
        )
    ''')
    conn.commit()
    conn.close()

def add_word(sanskrit_word, hindi_gloss):
    """
    Add a Sanskrit word and its Hindi gloss to the database.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO SanskritHindi (sanskrit_word, hindi_gloss) VALUES (?, ?)", 
                       (sanskrit_word, hindi_gloss))
        conn.commit()
    except sqlite3.IntegrityError:
        print(f"‚ö†Ô∏è '{sanskrit_word}' already exists in the dictionary.")
    finally:
        conn.close()

def get_hindi_meaning(sanskrit_word):
    """
    Retrieve Hindi meaning for a given Sanskrit word.
    """
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT hindi_gloss FROM SanskritHindi WHERE sanskrit_word = ?", (sanskrit_word,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else "‚ùå ‡§Ö‡§∞‡•ç‡§• ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à"

# --- 2Ô∏è‚É£ ‡§∂‡§¨‡•ç‡§¶-‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§Æ‡•ç (Sabda-vi≈õle·π£a·πáam) ---
def word_analysis(word):
    """
    Perform basic Sanskrit word analysis (split Sandhi if applicable).
    """
    # Example of simple Sandhi splitting (Advanced model can be added)
    sandhi_patterns = {
        "‡§∞‡§æ‡§Æ‡§∏‡•ç‡§Ø": ["‡§∞‡§æ‡§Æ", "‡§∏‡•ç‡§Ø"],
        "‡§Æ‡§ø‡§§‡•ç‡§∞‡§∏‡•ç‡§Ø": ["‡§Æ‡§ø‡§§‡•ç‡§∞", "‡§∏‡•ç‡§Ø"],
        "‡§ó‡§ö‡•ç‡§õ‡§§‡§ø": ["‡§ó‡§Æ‡•ç", "‡§§‡§ø"]
    }
    return sandhi_patterns.get(word, [word])  # Return split words or original word

# --- 3Ô∏è‚É£ ‡§Ü‡§ï‡§æ‡§Ç‡§ï‡•ç‡§∑‡§æ (ƒÄkƒÅ·πÖk·π£ƒÅ - Dependency Resolution) ---
def dependency_resolution(words):
    """
    Determine word dependency based on basic syntax rules.
    """
    dependencies = {
        "‡§∞‡§æ‡§Æ‡§É": "‡§ï‡§∞‡•ç‡§§‡§æ (Subject)",
        "‡§ó‡§ö‡•ç‡§õ‡§§‡§ø": "‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ (Verb)",
        "‡§´‡§≤‡§Æ‡•ç": "‡§ï‡§∞‡•ç‡§Æ (Object)",
        "‡§Æ‡§ø‡§§‡•ç‡§∞‡§Æ‡•ç": "‡§∏‡§Ç‡§¨‡§Ç‡§ß (Relation)"
    }
    return {word: dependencies.get(word, "‚ùì ‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ") for word in words}

# --- 4Ô∏è‚É£ ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç (Sentence Breakdown) ---
def translate_sentence(sentence):
    """
    Translate a Sanskrit sentence to Hindi using word analysis.
    """
    words = re.findall(r'\b\w+\b', sentence)  # Tokenize sentence
    hindi_translation = []

    for word in words:
        split_words = word_analysis(word)
        for sw in split_words:
            hindi_translation.append(f"{sw} ({get_hindi_meaning(sw)})")
    
    return " | ".join(hindi_translation)

# --- Example Usage ---
if __name__ == "__main__":
    initialize_database()
    
    # Adding sample words to dictionary
    add_word("‡§∞‡§æ‡§Æ‡§É", "‡§∞‡§æ‡§Æ (‡§è‡§ï ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø)")
    add_word("‡§ó‡§ö‡•ç‡§õ‡§§‡§ø", "‡§ú‡§æ‡§§‡§æ ‡§π‡•à")
    add_word("‡§´‡§≤‡§Æ‡•ç", "‡§´‡§≤")
    add_word("‡§Æ‡§ø‡§§‡•ç‡§∞‡§Æ‡•ç", "‡§Æ‡§ø‡§§‡•ç‡§∞")

    # Sample Sanskrit sentence analysis
    sentence = "‡§∞‡§æ‡§Æ‡§É ‡§ó‡§ö‡•ç‡§õ‡§§‡§ø ‡§´‡§≤‡§Æ‡•ç"
    print(f"üîç ‡§∏‡§Ç‡§∏‡•ç‡§ï‡•É‡§§ ‡§µ‡§æ‡§ï‡•ç‡§Ø: {sentence}")
    
    # Word-by-word translation
    print(f"üìñ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶: {translate_sentence(sentence)}")
    
    # Analyzing words and dependencies
    words = sentence.split()
    analysis_result = dependency_resolution(words)
    for word, role in analysis_result.items():
        print(f"üîπ {word} ‚Üí {role}")
